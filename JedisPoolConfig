/**
 * Copyright (c) 2020-2027 shun
 * All rights reserved.
 *
 */
package com.bx.redis;

import java.util.HashSet;
import java.util.Set;

import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisClusterConfiguration;
import org.springframework.data.redis.connection.RedisNode;
import org.springframework.data.redis.connection.RedisPassword;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;

import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPoolConfig;

@Configuration
public class RedisClusterConfig{

	@Value("${redis.cluster.nodes}")
	private String clusterNodes;
	@Value("${redis.cluster.max-redirects}")
	private int maxRedirects;
	@Value("${redis.password}")
	private String password;
	@Value("${redis.timeout}")
	private int timeout;
	@Value("${redis.maxIdle}")
	private int maxIdle;
	@Value("${redis.maxTotal}")
	private int maxTotal;
	@Value("${redis.maxWaitMillis}")
	private int maxWaitMillis;
	@Value("${redis.minEvictableIdleTimeMillis}")
	private int minEvictableIdleTimeMillis;
	@Value("${redis.numTestsPerEvictionRun}")
	private int numTestsPerEvictionRun;
	@Value("${redis.timeBetweenEvictionRunsMillis}")
	private int timeBetweenEvictionRunsMillis;
	@Value("${redis.testOnBorrow}")
	private boolean testOnBorrow;
	@Value("${redis.testWhileIdle}")
	private boolean testWhileIdle;
	@Value("${redis.command-timeout}")
	private int commandTimeout;
	@Value("${redis.connection-timeout}")
	private int connectionTimeout;
	@Value("${redis.soTimeout}")
	private int soTimeout;
	@Value("${redis.maxAttempts}")
	private int maxAttempts;

	/**
	 * Redis连接池的配置
	 * 
	 * @return JedisPoolConfig
	 */
	@Bean
	public JedisPoolConfig getJedisPoolConfig() {
		JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
		// 最大空闲数
		jedisPoolConfig.setMaxIdle(maxIdle);
		// 连接池的最大数据库连接数
		jedisPoolConfig.setMaxTotal(maxTotal);
		// 最大建立连接等待时间
		jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);
		// 逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
		jedisPoolConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
		// 每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
		jedisPoolConfig.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
		// 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
		jedisPoolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
		// 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
		jedisPoolConfig.setTestOnBorrow(testOnBorrow);
		// 在空闲时检查有效性, 默认false
		jedisPoolConfig.setTestWhileIdle(testWhileIdle);
		return jedisPoolConfig;
	}

	@Bean
	public JedisSlotHandler JedisClusterPipeline() {
		// 构建对象并返回；

		JedisClusterPipeline jedisClusterPipeline = new JedisClusterPipeline(getClusterNodes(), 2000, 2000, 10,
				password, new JedisPoolConfig());
		System.out.println("jedisClusterPipeline : new ");
		return jedisClusterPipeline.getConnectionHandler();
	}
	/**
	 * Redis集群的配置
	 * 
	 * @return RedisClusterConfiguration
	 */
	@Bean
	public RedisClusterConfiguration redisClusterConfiguration() {
		RedisClusterConfiguration redisClusterConfiguration = new RedisClusterConfiguration();
		// Set<RedisNode> clusterNodes
		Set<RedisNode> nodes = new HashSet<RedisNode>();
		for (HostAndPort node : getClusterNodes()) {
			nodes.add(new RedisNode(node.getHost(), node.getPort()));
		}
		redisClusterConfiguration.setClusterNodes(nodes);
		redisClusterConfiguration.setMaxRedirects(maxRedirects);
		redisClusterConfiguration.setPassword(RedisPassword.of(password));
		return redisClusterConfiguration;
	}
	
	/**
	 * redis连接工厂类
	 * 
	 * @return JedisConnectionFactory
	 */
	@Bean
	public JedisConnectionFactory jedisConnectionFactory() {
		// 集群模式
		JedisConnectionFactory factory = new JedisConnectionFactory(redisClusterConfiguration(), getJedisPoolConfig());
		return factory;
	}

	@Bean
	public JedisCluster getJedisCluster() {
		// 构建对象并返回；
		GenericObjectPoolConfig<?> poolConfig = new GenericObjectPoolConfig<Object>();
		// 最大空闲数
		poolConfig.setMaxIdle(maxIdle);
		// 连接池的最大数据库连接数
		poolConfig.setMaxTotal(maxTotal);
		// 最大建立连接等待时间
		poolConfig.setMaxWaitMillis(maxWaitMillis);
		// 逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
		poolConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
		// 每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
		poolConfig.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
		// 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
		poolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
		// 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
		poolConfig.setTestOnBorrow(testOnBorrow);
		// 在空闲时检查有效性, 默认false
		poolConfig.setTestWhileIdle(testWhileIdle);

		System.out.println("JedisCluster : new ");
		return new JedisCluster(getClusterNodes(), connectionTimeout, soTimeout, maxAttempts, password, poolConfig);
	}

	/**
	 * 实例化 RedisTemplate 对象
	 * 
	 * @return RedisTemplate<String, Object>
	 */
	@Bean
	public RedisTemplate<String, Object> redisTemplate() {
		RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
		// Template初始化
		initDomainRedisTemplate(redisTemplate);
		return redisTemplate;
	}

	private Set<HostAndPort> getClusterNodes() {
		// 获取redis集群的ip及端口号等相关信息；
		String[] serverArray = clusterNodes.split(",");
		Set<HostAndPort> nodes = new HashSet<>();

		// 遍历add到HostAndPort中；
		for (String ipPort : serverArray) {
			String[] ipPortPair = ipPort.split(":");
			nodes.add(new HostAndPort(ipPortPair[0].trim(), Integer.valueOf(ipPortPair[1].trim())));
		}

		return nodes;
	}

	/**
	 * 设置数据存入 redis 的序列化方式 使用默认的序列化会导致key乱码
	 */
	private void initDomainRedisTemplate(RedisTemplate<String, Object> redisTemplate) {
		// 开启redis数据库事务的支持
		redisTemplate.setEnableTransactionSupport(true);
		redisTemplate.setConnectionFactory(jedisConnectionFactory());

		// 如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to
		// String！
		StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();
		redisTemplate.setKeySerializer(stringRedisSerializer);
		// hash的key也采用String的序列化方式
		redisTemplate.setHashKeySerializer(stringRedisSerializer);

		// jackson序列化对象设置
		Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(
				Object.class);
		ObjectMapper om = new ObjectMapper();
		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
//		om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
		om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance , 
		        ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
		jackson2JsonRedisSerializer.setObjectMapper(om);

		// value序列化方式采用jackson
		redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
		// hash的value序列化方式采用jackson
		redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);

		redisTemplate.afterPropertiesSet();
	}
}
